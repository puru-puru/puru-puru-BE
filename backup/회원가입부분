//   // 회원가입
//   signupUser = async (req: Request, res: Response, next: NextFunction) => {
//     try {
//       const { email, nickname, password, confirmPassword } =
//         await userSchema.validateAsync(req.body);

//       if (!this.authService.confirmPassword(password, confirmPassword)) {
//         throw { name: "PasswordMismatch" };
//       }

//       await this.authService.signupUser(email, nickname, password);

//       return res.status(200).json({ message: "회원 가입 성공" });
//     } catch (err) {
//       next(err);
//     }
//   };
// 이건 컨트롤러 부분

//  //회원가입
//  signupUser = async (email: string, nickname: string, password: string) => {
//     try {
//       // 우선 에러 처리.
//       if (!email || !password) {
//         throw { name: "ValidationError" };
//       }
//       // 여기서 검증 부분을 처리 해야 하기에.. 디비 안에 있는거 여기서 꺼내옴.
//       const isExistUser = await Users.findOne({
//         where: { email },
//       });

//       if (isExistUser) {
//         throw { name: "ExistUser" };
//       }
//       // 이후 에러 뚫고 오면 비밀 번호 해쉬화.
//       const salt = bcrypt.genSaltSync(parseInt(hash));
//       const hashPassword = bcrypt.hashSync(password, salt);

//       const signupUser = await this.userRepository.createUser({
//         email,
//         nickname,
//         password: hashPassword,
//       });

//       return {
//         signupUser,
//       };
//     } catch (err: any) {
//       throw err;
//     }
//   };
//   서비스 부분